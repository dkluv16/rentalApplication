// <auto-generated />
using System;
using CampChetekRental.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CampChetekRental.Migrations
{
    [DbContext(typeof(RentalAttribute))]
    partial class RentalAttributeModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CampChetekRental.Models.ActivityType", b =>
                {
                    b.Property<int>("activityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timeOfYearId")
                        .HasColumnType("int");

                    b.HasKey("activityTypeId");

                    b.HasIndex("timeOfYearId");

                    b.ToTable("activityTypes");

                    b.HasData(
                        new
                        {
                            activityTypeId = 1,
                            cost = 25,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "With over 500 feet of sandy beach, full size artificial palm trees, white coral rock and floating inflatables, you can take a tropical vacation or day trip right here in Wisconsin",
                            isActive = true,
                            name = "Swim Area",
                            timeOfYearId = 1
                        },
                        new
                        {
                            activityTypeId = 2,
                            cost = 30,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Are you ready to start “horsin’ around?” Camp is the summer home to 14 horses – who all seem to earn a place in the heart of someone each summer. The riding director and her capable staff work to ensure a safe and quality environment for equestrian instruction, from novice to advanced skills.",
                            isActive = true,
                            name = "Horse Back Riding",
                            timeOfYearId = 1
                        },
                        new
                        {
                            activityTypeId = 3,
                            cost = 35,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "The High Ropes Course is a unique, intense, and fun experience! Participants will learn about faith, trust, overcoming fears, and teamwork. One of the unique aspects of this course is that participants must work together as a team.  This makes the course perfect for groups such as junior high and high school groups, sports teams, and colleagues. ",
                            isActive = true,
                            name = "High Ropes",
                            timeOfYearId = 2
                        },
                        new
                        {
                            activityTypeId = 4,
                            cost = 15,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Tubing is a great way to take in all that the outdoors has to offer while staying cool on the water. ",
                            isActive = true,
                            name = "Water Tubing",
                            timeOfYearId = 2
                        },
                        new
                        {
                            activityTypeId = 5,
                            cost = 5,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Laser Tag is for the adventure enthusiast! Campers love this thrilling game of hide-n-seek in our Outdoor Laser Tag facility, while competing in both team games and advanced competitions.",
                            isActive = true,
                            name = "Laser Tag",
                            timeOfYearId = 3
                        },
                        new
                        {
                            activityTypeId = 6,
                            cost = 10,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Escape rooms are live-action team-based games where players discover clues, solve puzzles, and accomplish tasks in one or more rooms in order to accomplish a specific goal in a limited amount of time.",
                            isActive = true,
                            name = "Escape Room",
                            timeOfYearId = 4
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.BeddingType", b =>
                {
                    b.Property<int>("beddingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<bool>("isBedding")
                        .HasColumnType("bit");

                    b.HasKey("beddingTypeId");

                    b.ToTable("beddingTypes");

                    b.HasData(
                        new
                        {
                            beddingTypeId = 1,
                            cost = 0,
                            isBedding = false
                        },
                        new
                        {
                            beddingTypeId = 2,
                            cost = 15,
                            isBedding = true
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.BlockDates", b =>
                {
                    b.Property<int>("blockDatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("blockDatesId");

                    b.ToTable("blockDates");

                    b.HasData(
                        new
                        {
                            blockDatesId = 1,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 17, DateTimeKind.Local).AddTicks(991),
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 17, DateTimeKind.Local).AddTicks(490)
                        },
                        new
                        {
                            blockDatesId = 2,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 17, DateTimeKind.Local).AddTicks(1499),
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 17, DateTimeKind.Local).AddTicks(1469)
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.GroupType", b =>
                {
                    b.Property<int>("GroupTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupTypeId");

                    b.ToTable("groupTypes");

                    b.HasData(
                        new
                        {
                            GroupTypeId = 1,
                            TypeName = "Other"
                        },
                        new
                        {
                            GroupTypeId = 2,
                            TypeName = "School Camp"
                        },
                        new
                        {
                            GroupTypeId = 3,
                            TypeName = "Retreat"
                        },
                        new
                        {
                            GroupTypeId = 4,
                            TypeName = "Day Camp"
                        },
                        new
                        {
                            GroupTypeId = 5,
                            TypeName = "Ladies Retreat"
                        },
                        new
                        {
                            GroupTypeId = 6,
                            TypeName = "Mens Retreat"
                        },
                        new
                        {
                            GroupTypeId = 7,
                            TypeName = "Family Reunion"
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.HousingChoice", b =>
                {
                    b.Property<int>("housingChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("beddingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("housingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("numberHousing")
                        .HasColumnType("int");

                    b.Property<int>("registerId")
                        .HasColumnType("int");

                    b.HasKey("housingChoiceId");

                    b.HasIndex("beddingTypeId");

                    b.HasIndex("housingTypeId");

                    b.HasIndex("registerId");

                    b.ToTable("housingChoices");

                    b.HasData(
                        new
                        {
                            housingChoiceId = 1,
                            beddingTypeId = 1,
                            housingTypeId = 2,
                            numberHousing = 7,
                            registerId = 1
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.HousingType", b =>
                {
                    b.Property<int>("housingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buildingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("housingTypeId");

                    b.ToTable("housingTypes");

                    b.HasData(
                        new
                        {
                            housingTypeId = 1,
                            building = "Camper Cabin",
                            buildingDescription = "Roomy cabin with sleeping up to 11. Twin size bunk beds and A/C. Bathhouse is located in close proximity for showers and restroom.",
                            cost = 10,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "LodgingWithBedding"
                        },
                        new
                        {
                            housingTypeId = 2,
                            building = "Mondern Room",
                            buildingDescription = "Four seasons housing with A/C and Heat. Private Bathroom in room, sleeping up to 7. Three sets of twin size bunks and one queen bed.",
                            cost = 20,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "LodgingWithBedding"
                        },
                        new
                        {
                            housingTypeId = 3,
                            building = "RV Park",
                            buildingDescription = "The RV Park has plenty of room for any size RV. Hook ups for septic, water, and eletriity. Bathhouse located in RV park with showers, restroom, and laundry.",
                            cost = 7,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "Lodging"
                        },
                        new
                        {
                            housingTypeId = 4,
                            building = "Tent Camp Site",
                            buildingDescription = "Sleep under the stars, in our well mainted sites. Bathhouse located close by with showers, restroom, and laundry.",
                            cost = 4,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "Lodging"
                        },
                        new
                        {
                            housingTypeId = 5,
                            building = "Lodge",
                            buildingDescription = "The Lodge has meeting room for up to 70. Also includes kitchen with dining up to 90. Also includes games such as pool table, bumper pool tables, and carpet ball.",
                            cost = 45,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "Meeting Area"
                        },
                        new
                        {
                            housingTypeId = 6,
                            building = "Dining Hall Meeting Area",
                            buildingDescription = "Small meeting area for group up to 35, summer time use only, has A/C.",
                            cost = 30,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "Meeting Area"
                        },
                        new
                        {
                            housingTypeId = 7,
                            building = "Gym Class Room",
                            buildingDescription = "Meeting area for groups up to 150, includes comfortable setting and year-round use.",
                            cost = 50,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            type = "Meeting Area"
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.MealChoice", b =>
                {
                    b.Property<int>("mealChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("mealTypeId")
                        .HasColumnType("int");

                    b.Property<int>("numberOfMeals")
                        .HasColumnType("int");

                    b.Property<int>("registerId")
                        .HasColumnType("int");

                    b.HasKey("mealChoiceId");

                    b.HasIndex("mealTypeId");

                    b.HasIndex("registerId");

                    b.ToTable("mealChoices");

                    b.HasData(
                        new
                        {
                            mealChoiceId = 1,
                            mealTypeId = 2,
                            numberOfMeals = 4,
                            registerId = 2
                        },
                        new
                        {
                            mealChoiceId = 2,
                            mealTypeId = 3,
                            numberOfMeals = 6,
                            registerId = 1
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.MealType", b =>
                {
                    b.Property<int>("mealTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("mealDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mealTypeId");

                    b.ToTable("mealTypes");

                    b.HasData(
                        new
                        {
                            mealTypeId = 1,
                            cost = 5,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Simple breakfast: with cereal and cinnamon rolls.",
                            type = "Breakfast"
                        },
                        new
                        {
                            mealTypeId = 2,
                            cost = 8,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Home cooked breakfast: with eggs, sausage, and bacon.",
                            type = "Breakfast"
                        },
                        new
                        {
                            mealTypeId = 3,
                            cost = 12,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Continental breakfast: with waffle bar, pancakes cooked to order, steak",
                            type = "Breakfast"
                        },
                        new
                        {
                            mealTypeId = 4,
                            cost = 3,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Simple lunch: with sandwich and water and lemonade",
                            type = "Lunch"
                        },
                        new
                        {
                            mealTypeId = 5,
                            cost = 6,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Cookout lunch: with hamburgers, chips, beans, and the fixens",
                            type = "Lunch"
                        },
                        new
                        {
                            mealTypeId = 6,
                            cost = 15,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Buffet lunch: with your choice of food options from pizza to prime rib",
                            type = "Lunch"
                        },
                        new
                        {
                            mealTypeId = 7,
                            cost = 5,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Simple dinner: with pasta and either fettuine alfredo or tomato sauce",
                            type = "Dinner"
                        },
                        new
                        {
                            mealTypeId = 8,
                            cost = 6,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Cookout dinner: with hamburgers, chips, beans, and the fixens",
                            type = "Dinner"
                        },
                        new
                        {
                            mealTypeId = 9,
                            cost = 13,
                            dateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            mealDescription = "Banquet: with your choice of prime meat cut, and sides.",
                            type = "Dinner"
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.ProgramChoice", b =>
                {
                    b.Property<int>("programChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("activityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("numberParticipating")
                        .HasColumnType("int");

                    b.Property<int>("registerId")
                        .HasColumnType("int");

                    b.HasKey("programChoiceId");

                    b.HasIndex("activityTypeId");

                    b.HasIndex("registerId");

                    b.ToTable("programs");

                    b.HasData(
                        new
                        {
                            programChoiceId = 1,
                            activityTypeId = 2,
                            numberParticipating = 35,
                            registerId = 1
                        },
                        new
                        {
                            programChoiceId = 2,
                            activityTypeId = 3,
                            numberParticipating = 45,
                            registerId = 1
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.Register", b =>
                {
                    b.Property<int>("registerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodAllergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("int");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pet")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.Property<DateTime>("event_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("event_start")
                        .HasColumnType("datetime2");

                    b.HasKey("registerId");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("register");

                    b.HasData(
                        new
                        {
                            registerId = 1,
                            Address = "730 Lakeview Drive",
                            City = "Chetek",
                            Email = "john@campchetek.org",
                            FirstName = "John",
                            FoodAllergies = "Peanut",
                            GroupNumber = 33,
                            GroupTypeId = 3,
                            LastName = "Doe",
                            Pet = true,
                            Phone = "715 924-3222",
                            State = "WI",
                            Zip = 54728,
                            event_end = new DateTime(2022, 4, 30, 12, 26, 14, 14, DateTimeKind.Local).AddTicks(971),
                            event_start = new DateTime(2022, 4, 30, 12, 26, 14, 9, DateTimeKind.Local).AddTicks(9456)
                        },
                        new
                        {
                            registerId = 2,
                            Address = "110th Ave South St.",
                            City = "Barron",
                            Email = "summer@campchetek.org",
                            FirstName = "Bill",
                            FoodAllergies = "Gluten",
                            GroupNumber = 105,
                            GroupTypeId = 2,
                            LastName = "Summer",
                            Pet = false,
                            Phone = "815 324-4522",
                            State = "WI",
                            Zip = 54528,
                            event_end = new DateTime(2022, 4, 30, 12, 26, 14, 14, DateTimeKind.Local).AddTicks(6362),
                            event_start = new DateTime(2022, 4, 30, 12, 26, 14, 14, DateTimeKind.Local).AddTicks(6325)
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.TimeOfYear", b =>
                {
                    b.Property<int>("timeOfYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("timeOfYearId");

                    b.ToTable("timeOfYears");

                    b.HasData(
                        new
                        {
                            timeOfYearId = 1,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(3686),
                            season = "Winter",
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(3181)
                        },
                        new
                        {
                            timeOfYearId = 2,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4582),
                            season = "Spring",
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4551)
                        },
                        new
                        {
                            timeOfYearId = 3,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4616),
                            season = "Summer",
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4611)
                        },
                        new
                        {
                            timeOfYearId = 4,
                            endDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4625),
                            season = "Fall",
                            startDate = new DateTime(2022, 4, 30, 12, 26, 14, 15, DateTimeKind.Local).AddTicks(4621)
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userRoleId")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.HasIndex("userRoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            userId = 1,
                            Email = "danael@campchetek.org",
                            FirstName = "Dan",
                            Hash = "19Dn6kMzpc+Tu4g/tiW2+tDE001i83A3zX3bdZJWOl9kFIYZIggxQ2q8xON2wGNEg5lqCUGiHAz+Kp2WtL/B8eBZzFxr1ckehd94rc5+j3h3CsSwi+TfPQ/34QYaTJq5ph3NrfOPvoli7HBWnsoyfZPGgSRaMbSz9ZF3qBX8+Dx2gzkG5l1X484UgK1t3JgZ8MlFpUvotZHEtbtWWu9Mx/RDRJesMArIzEZyfs0+TEkTHZ37/JZYv4RKErvNEHqhV9CEPVUzXQlIMb6n4cEAyfMCBnfrV1Y+Xl1r+6fUJ9cq3HwZbqgyYYRmK1P4mssWjZxM9Vefaiz1SkPUvbWEpA==",
                            LastName = "Kluver",
                            Password = "1234",
                            Salt = "/AkHj0yx/0sDzWQrrpBGuw==",
                            userRoleId = 1
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.UserRole", b =>
                {
                    b.Property<int>("userRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("userDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userRoleId");

                    b.ToTable("userRoles");

                    b.HasData(
                        new
                        {
                            userRoleId = 1,
                            userDescription = "Administrator"
                        },
                        new
                        {
                            userRoleId = 2,
                            userDescription = "Hospitality"
                        },
                        new
                        {
                            userRoleId = 3,
                            userDescription = "Cook Staff"
                        },
                        new
                        {
                            userRoleId = 4,
                            userDescription = "New Account"
                        });
                });

            modelBuilder.Entity("CampChetekRental.Models.ActivityType", b =>
                {
                    b.HasOne("CampChetekRental.Models.TimeOfYear", "TimeOfYear")
                        .WithMany()
                        .HasForeignKey("timeOfYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampChetekRental.Models.HousingChoice", b =>
                {
                    b.HasOne("CampChetekRental.Models.BeddingType", "BeddingType")
                        .WithMany()
                        .HasForeignKey("beddingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampChetekRental.Models.HousingType", "HousingType")
                        .WithMany()
                        .HasForeignKey("housingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampChetekRental.Models.Register", "Register")
                        .WithMany()
                        .HasForeignKey("registerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampChetekRental.Models.MealChoice", b =>
                {
                    b.HasOne("CampChetekRental.Models.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("mealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampChetekRental.Models.Register", "Register")
                        .WithMany()
                        .HasForeignKey("registerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampChetekRental.Models.ProgramChoice", b =>
                {
                    b.HasOne("CampChetekRental.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("activityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampChetekRental.Models.Register", "Register")
                        .WithMany()
                        .HasForeignKey("registerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampChetekRental.Models.Register", b =>
                {
                    b.HasOne("CampChetekRental.Models.GroupType", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampChetekRental.Models.User", b =>
                {
                    b.HasOne("CampChetekRental.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("userRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
